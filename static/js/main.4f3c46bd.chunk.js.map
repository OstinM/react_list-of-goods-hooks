{"version":3,"sources":["types/SortParams.tsx","App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DefaultSort","sortOrder","setSortOrder","isReversed","setIsReversed","sortGoodsList","goods","preparedGoods","Length","sort","a","b","length","Alphabet","localeCompare","reverse","getSortedList","shouldShowResetButton","className","type","cn","onClick","prevValue","map","goodsItem","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,6EAAAA,K,wBAAAA,E,gBAAAA,E,yBAAAA,M,gBCOCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,aAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA9BR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAE1B,OAAQL,GACN,KAAKL,EAASY,OACZD,EAAcE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UAC1C,MAEF,KAAKhB,EAASiB,SACZN,EAAcE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,cAAcH,MAWjD,OAJIR,GACFI,EAAcQ,UAGTR,EAMeS,CACpBnB,EACAI,EACAE,GAIIc,EAAwBd,GACzBF,IAAcL,EAASI,YAO5B,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYnB,IAAcL,EAASiB,WAErCQ,QAAS,kBACPnB,EAAaN,EAASiB,WAN1B,iCAYA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYnB,IAAcL,EAASY,SAErCa,QAAS,kBACPnB,EAAaN,EAASY,SAN1B,4BAYA,wBACEW,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAajB,IAEfkB,QAzCoB,kBAAMjB,GAAc,SAAAkB,GAAS,OAAKA,MAoCxD,qBAUEL,GACA,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA9CU,WAClBjB,GAAc,GACdF,EAAaN,EAASI,cAyChB,sBAUJ,6BACGK,EAAckB,KAAI,SAAAC,GAAS,OAC1B,oBAAoB,UAAQ,OAA5B,SACGA,GADMA,YClHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4f3c46bd.chunk.js","sourcesContent":["export enum SortType {\n  Alphabet = 'alphabetical',\n  Length = 'length',\n  DefaultSort = 'byDefault',\n}\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\n\nimport './App.scss';\nimport { SortType } from './types/SortParams';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype GoodsList = string[];\n\nfunction getSortedList(\n  goods: GoodsList,\n  sortOrder: SortType,\n  isReversed: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  switch (sortOrder) {\n    case SortType.Length:\n      preparedGoods.sort((a, b) => a.length - b.length);\n      break;\n\n    case SortType.Alphabet:\n      preparedGoods.sort((a, b) => a.localeCompare(b));\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortOrder, setSortOrder] = useState(SortType.DefaultSort);\n  const [isReversed, setIsReversed] = useState(false);\n  const sortGoodsList = getSortedList(\n    goodsFromServer,\n    sortOrder,\n    isReversed,\n  );\n\n  const handleToggleReverse = () => setIsReversed(prevValue => !prevValue);\n  const shouldShowResetButton = isReversed\n    || sortOrder !== SortType.DefaultSort;\n\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortOrder(SortType.DefaultSort);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortOrder !== SortType.Alphabet,\n          })}\n          onClick={() => (\n            setSortOrder(SortType.Alphabet)\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortOrder !== SortType.Length,\n          })}\n          onClick={() => (\n            setSortOrder(SortType.Length)\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={handleToggleReverse}\n        >\n          Reverse\n        </button>\n\n        {(shouldShowResetButton) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortGoodsList.map(goodsItem => (\n          <li key={goodsItem} data-cy=\"Good\">\n            {goodsItem}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}